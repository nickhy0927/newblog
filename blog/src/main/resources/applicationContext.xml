<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	default-lazy-init="true"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <description>Spring公共配置</description>
    <bean id="springContextHolder" class="com.orm.config.SpringContextHolder" lazy-init="false"/>
    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.iss">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <jpa:repositories base-package="com.iss"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"
                      factory-class="com.orm.commons.bean.DefaultRepositoryFactoryBean">
    </jpa:repositories>

    <!-- JPA实体管理工厂的配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="com.iss"/>
        <!--待扫描的实体类包，不再需要persistence.xml了 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!--指定实现JPA的适配器 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"/>
    </bean>

    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 将多个配置文件位置放到列表中 -->
    <bean id="propertyResources" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <!-- 这里支持多种寻址方式：classpath和file -->
                <value>classpath*:/application.development.properties</value>
                <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
                <value>classpath*:/InitEnvironment.properties</value>
            </list>
        </constructor-arg>
    </bean>

    <!-- 将配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" ref="propertyResources"/>
    </bean>
    <bean id="initEnvironment" class="com.orm.config.InitEnvironment" init-method="init" lazy-init="false" scope="singleton">
        <property name="ignoreResources" value="${ignoreResources}"/>
        <property name="initPassword" value="${initPassword}"/>
        <property name="initUsername" value="${initUsername}"/>
        <property name="loginUrl" value="${loginUrl}" />
        <property name="unauthUrl" value="${unauthUrl}" />
        <property name="indexUrl" value="${indexUrl}" />
        <property name="urls">
            <list>
                <value>/loginOut.html</value>
            </list>
        </property>
    </bean>
    <bean class="com.iss.init.EnvironmentServer" id="environmentServer">
    	<property name="nginxServer" value="${nginx.server}" />
    </bean>
    <!-- development 环境 -->
    <beans profile="development">
        <!-- <context:property-placeholder ignore-unresolvable="true"  location="classpath*:/application.development.properties"/> -->
        <!-- 数据源配置, 使用DBCP数据库连接池 -->
        <bean id="dataSourceSpied" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <!-- Connection Info -->
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>

            <!-- Connection Pooling Info -->
            <property name="maxActive" value="${dbcp.maxActive}"/>
            <property name="maxIdle" value="${dbcp.maxIdle}"/>
            <property name="defaultAutoCommit" value="false"/>
            <!-- 连接Idle一个小时后超时 -->
            <property name="timeBetweenEvictionRunsMillis" value="3600000"/>
            <property name="minEvictableIdleTimeMillis" value="3600000"/>
        </bean>

        <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
            <constructor-arg ref="dataSourceSpied"/>
        </bean>
    </beans>
</beans>
